commit 70a66eb0c5b05382261ed479dec33f02bc57d5a7
Author: Alexey Novak <alexey.novak.mail@gmail.com>
Date:   Wed Jul 30 22:21:16 2014 -0400

    1030366: Hidden toolbar is not really hidden when editing contact, r=rik

diff --git a/apps/communications/dialer/style/toolbar.css b/apps/communications/dialer/style/toolbar.css
index 70b9783..4a6551a 100755
--- a/apps/communications/dialer/style/toolbar.css
+++ b/apps/communications/dialer/style/toolbar.css
@@ -67,6 +67,7 @@
 #views.hide-toolbar > li:before,
 #views.hide-toolbar > li > .icon {
   transform: translateY(100%);
+  visibility: hidden;
 }
 
 #views.hide-toolbar #iframe-contacts-container {
diff --git a/tests/python/gaia-ui-tests/gaiatest/apps/contacts/app.py b/tests/python/gaia-ui-tests/gaiatest/apps/contacts/app.py
index ccd5ecc..ba44cd8 100644
--- a/tests/python/gaia-ui-tests/gaiatest/apps/contacts/app.py
+++ b/tests/python/gaia-ui-tests/gaiatest/apps/contacts/app.py
@@ -57,6 +57,13 @@ class Contacts(Base):
         new_contact.wait_for_new_contact_form_to_load()
         return new_contact
 
+    def a11y_click_new_contact(self):
+        self.accessibility.click(self.marionette.find_element(*self._new_contact_button_locator))
+        from gaiatest.apps.contacts.regions.contact_form import NewContact
+        new_contact = NewContact(self.marionette)
+        new_contact.wait_for_new_contact_form_to_load()
+        return new_contact
+
     def tap_settings(self):
         self.marionette.find_element(*self._settings_button_locator).tap()
         from gaiatest.apps.contacts.regions.settings_form import SettingsForm
@@ -96,7 +103,13 @@ class Contacts(Base):
 
         def tap(self, return_class='ContactDetails'):
             self.root_element.find_element(*self._name_locator).tap()
+            return self._return_class_from_tap(return_class)
+
+        def a11y_click(self, return_class='ContactDetails'):
+            self.accessibility.click(self.root_element)
+            return self._return_class_from_tap(return_class)
 
+        def _return_class_from_tap(self, return_class='ContactDetails'):
             if return_class == 'ContactDetails':
                 from gaiatest.apps.contacts.regions.contact_details import ContactDetails
                 return ContactDetails(self.marionette)
diff --git a/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_details.py b/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_details.py
index 2790763..2933a10 100644
--- a/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_details.py
+++ b/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_details.py
@@ -60,6 +60,12 @@ class ContactDetails(Base):
         from gaiatest.apps.contacts.regions.contact_form import EditContact
         return EditContact(self.marionette)
 
+    def a11y_click_edit(self):
+        self.wait_for_element_displayed(*self._edit_contact_button_locator)
+        self.accessibility.click(self.marionette.find_element(*self._edit_contact_button_locator))
+        from gaiatest.apps.contacts.regions.contact_form import EditContact
+        return EditContact(self.marionette)
+
     def tap_back(self):
         self.wait_for_element_displayed(*self._back_button_locator)
         self.marionette.find_element(*self._back_button_locator).tap()
diff --git a/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_form.py b/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_form.py
index aaa1d6c..fc3cc61 100644
--- a/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_form.py
+++ b/tests/python/gaia-ui-tests/gaiatest/apps/contacts/regions/contact_form.py
@@ -189,7 +189,13 @@ class NewContact(ContactForm):
 
     def tap_done(self, return_contacts=True):
         self.marionette.find_element(*self._done_button_locator).tap()
+        return self.wait_for_done(return_contacts)
 
+    def a11y_click_done(self, return_contacts=True):
+        self.accessibility.click(self.marionette.find_element(*self._done_button_locator))
+        return self.wait_for_done(return_contacts)
+
+    def wait_for_done(self, return_contacts=True):
         # NewContact can be opened as an Activity from other apps. In this scenario we don't return Contacts
         if return_contacts:
             self.wait_for_element_not_displayed(*self._done_button_locator)
diff --git a/tests/python/gaia-ui-tests/gaiatest/tests/accessibility/phone/manifest.ini b/tests/python/gaia-ui-tests/gaiatest/tests/accessibility/phone/manifest.ini
index d000639..43ba732 100644
--- a/tests/python/gaia-ui-tests/gaiatest/tests/accessibility/phone/manifest.ini
+++ b/tests/python/gaia-ui-tests/gaiatest/tests/accessibility/phone/manifest.ini
@@ -8,3 +8,5 @@ carrier = true
 [test_a11y_phone_keypad.py]
 
 [test_a11y_phone_select_toolbars.py]
+
+[test_a11y_phone_edit_contact.py]
diff --git a/tests/python/gaia-ui-tests/gaiatest/tests/accessibility/phone/test_a11y_phone_edit_contact.py b/tests/python/gaia-ui-tests/gaiatest/tests/accessibility/phone/test_a11y_phone_edit_contact.py
new file mode 100644
index 0000000..6ca506c
--- /dev/null
+++ b/tests/python/gaia-ui-tests/gaiatest/tests/accessibility/phone/test_a11y_phone_edit_contact.py
@@ -0,0 +1,50 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+from gaiatest import GaiaTestCase
+from gaiatest.apps.phone.app import Phone
+from gaiatest.mocks.mock_contact import MockContact
+
+
+class TestAccessibilityPhoneEditContact(GaiaTestCase):
+
+    def setUp(self):
+        # Start application in Phone App
+        GaiaTestCase.setUp(self)
+        self.phone = Phone(self.marionette)
+        self.phone.launch()
+
+    def test_a11y_phone_edit_contact(self):
+
+        # Add a random contact
+        contacts = self.phone.a11y_click_contacts()
+
+        # Add new contact
+        new_contact_form = contacts.a11y_click_new_contact()
+
+        # Enter data into fields
+        contact = MockContact()
+        new_contact_form.type_given_name(contact['givenName'])
+
+        # Save new contact
+        new_contact_form.a11y_click_done()
+        self.wait_for_condition(lambda m: len(contacts.contacts) == 1)
+
+        # Edit the contact
+        contact_item = contacts.contact(contact['givenName'])
+        contact_item_detail = contact_item.a11y_click()
+        contact_item_edit = contact_item_detail.a11y_click_edit()
+
+        self.apps.switch_to_displayed_app()
+        # Now check if toolbar is visible by Screen Reader
+
+        # Keypad is hidden from the screen reader.
+        self.assertTrue(self.accessibility.is_hidden(self.marionette.find_element(
+            *self.phone._keypad_toolbar_button_locator)))
+        # Contacts is visible to the screen reader.
+        self.assertTrue(self.accessibility.is_hidden(self.marionette.find_element(
+            *self.phone._contacts_view_locator)))
+        # Call log is hidden from the screen reader.
+        self.assertTrue(self.accessibility.is_hidden(self.marionette.find_element(
+            *self.phone._call_log_toolbar_button_locator)))
diff --git a/tests/python/gaia-ui-tests/gaiatest/tests/tbpl-manifest.ini b/tests/python/gaia-ui-tests/gaiatest/tests/tbpl-manifest.ini
index 89f3bed..60b44ca 100644
--- a/tests/python/gaia-ui-tests/gaiatest/tests/tbpl-manifest.ini
+++ b/tests/python/gaia-ui-tests/gaiatest/tests/tbpl-manifest.ini
@@ -27,6 +27,7 @@ disabled = Bug 1022132 Intermittent Failure on TBPL
 
 [accessibility/phone/test_a11y_phone_keypad.py]
 [accessibility/phone/test_a11y_phone_select_toolbars.py]
+[accessibility/phone/test_a11y_phone_edit_contact.py]
 [accessibility/settings/test_a11y_slider_visibility.py]
 [accessibility/system/test_a11y_notification_visibility.py]
 [accessibility/system/test_a11y_utility_tray_notifications.py]
